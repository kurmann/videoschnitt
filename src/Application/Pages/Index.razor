@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Kurmann.Videoschnitt.Messages.Metadata
@using Kurmann.Videoschnitt.Messages.Timer
@inject NavigationManager Navigation
@inject Wolverine.IMessageBus bus


<h1>Willkommen bei Kurmann Videoschnitt</h1>

<nav>
    <a @onclick="async () => await ExecuteMetadataProcessing()">Metadaten-Verarbeitung</a>
    <a @onclick="StopTimerService">Timer stoppen</a>
    <a href="/swagger">API-Dokumentation</a>
</nav>

<div id="logContainer">
    <pre>
        @foreach (var log in logs)
        {
            @log.ToString()@Environment.NewLine;
        }
    </pre>
</div>

@code {
    private List<string> logs = new List<string>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/logHub"))
            .Build();

        logs.Add("Logs werden hier angezeigt.");

        hubConnection.On<string>("ReceiveLogMessage", async (message) =>
        {
            logs.Add(message);
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ExecuteMetadataProcessing()
    {
        // todo: send message to server)
        await bus.SendAsync(new ProcessMetadataRequest());
        StateHasChanged();
    }

    private async Task StartTimerService()
    {
        // todo: send message to server
        StateHasChanged();
    }

    private void StopTimerService()
    {
        // todo: send message to server
        StateHasChanged();
    }
}